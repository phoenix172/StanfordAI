@page "/data"
@using AnomalyDetection.Client.ServiceContracts
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject IAnomalyDetector Detector
@using AnomalyDetection.Client.Components
@using Plotly.Blazor
@using Plotly.Blazor.Traces
@using Plotly.Blazor.Traces.ScatterLib
@using System.Reflection

<MyMudProviders />

<PageTitle>Weather</PageTitle>







@code {
    PlotlyChart _chart;
    Config _config = new ();
    Layout _layout = new ();
    // Using of the interface IList is important for the event callback!
    IList<ITrace> data = new List<ITrace>
    {
        new Scatter
        {
            Name = "ScatterTrace",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = new List<object>{1,2,3},
            Y = new List<object>{1,2,3}
        }
    };

    protected override async Task OnInitializedAsync()
    {
        var asd = File.ReadAllText("appsettings.json");
        // // Simulate asynchronous loading to demonstrate streaming rendering
        // await Task.Delay(500);

        // var startDate = DateOnly.FromDateTime(DateTime.Now);
        // var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

        //await Task.Run(()=>Detector.LoadFrom("Data/Part1"));
        string path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
        Detector.LoadFrom(path + "/Data/Part1");

        // forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        // {
        //     Date = startDate.AddDays(index),
        //     TemperatureC = Random.Shared.Next(-20, 55),
        //     Summary = summaries[Random.Shared.Next(summaries.Length)]
        // }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
