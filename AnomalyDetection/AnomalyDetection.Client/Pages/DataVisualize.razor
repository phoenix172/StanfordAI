@page "/data"
@using System.Collections.Immutable
@using AnomalyDetection.Client.Components
@using Plotly.Blazor
@using Plotly.Blazor.Traces
@using Plotly.Blazor.Traces.ScatterLib
@using System.Reflection
@using System.Collections.Immutable
@using AnomalyDetection.Core
@using MathNet.Numerics.LinearAlgebra
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ContourLib
@using Plotly.Blazor.Traces.ContourLib.ContoursLib
@using Plotly.Blazor.Traces.ScatterLib.MarkerLib
@using HoverInfoFlag = Plotly.Blazor.Traces.ScatterLib.HoverInfoFlag
@rendermode @(new InteractiveAutoRenderMode(prerender: true))
@inject IAnomalyDetector Detector

<script src="_content/Plotly.Blazor/plotly-latest.min.js" type="text/javascript"></script>
<script src="_content/Plotly.Blazor/plotly-interop.js" type="text/javascript"></script>

<MudGrid>
    @if (_loaded)
    {
        <MudItem xs="12" md="6">
            <ChartComponent Data="_trainingScatter" Title="Training Data"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <ChartComponent Data="_contourPlot" Title="Gaussian Distribution Probability Levels"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <ChartComponent Data="_featurePlotX" Title="X Feature"/>
        </MudItem>
        <MudItem xs="12" md="6">
            <ChartComponent Data="_featurePlotY" Title="Y Feature"/>
        </MudItem>
    }

</MudGrid>


@code {
    private bool _loaded = false;
    private List<ITrace>? _trainingScatter;
    private List<ITrace>? _contourPlot;
    private List<ITrace>? _featurePlotX;
    private List<ITrace>? _featurePlotY;

    protected override async Task OnInitializedAsync()
    {
        await Detector.LoadFrom("Data/Part1");

        _trainingScatter = [MakeTrainingScatter()];

        _contourPlot = [MakeContourPlot(), _trainingScatter[0]];
        _featurePlotX = [MakeFeatureHistogram(Detector.TrainingData.EnumerateColumns().First())];
        _featurePlotY = [MakeFeatureHistogram(Detector.TrainingData.EnumerateColumns().Last())];
        _loaded = true;
        await base.OnInitializedAsync();
    }

    private Contour MakeContourPlot()
    {
        var x1Values = Utilities.VectorArrange(0, 35.5, 0.5);
        var x2Values = Utilities.VectorArrange(0, 35.5, 0.5);
        var coordinates = from x1 in x1Values from x2 in x2Values select (x1, x2);
        var data = Matrix<double>.Build.DenseOfRowArrays(coordinates.Select(x => new[] { x.x1, x.x2 }).ToArray());

        var parameters = Detector.EstimateGaussianParameters();
        var distribution = Detector.MultivariateGaussian(parameters with { Data = data });
        IList<object> zColumn = distribution.Cast<object>().ToList();
        var powers = Utilities.VectorArrange(-20, 1, 3);
        var contourLines = Vector<double>.Build.DenseOfEnumerable(Enumerable.Repeat(10d, powers.Count)).PointwisePower(powers);

        var contour = new Contour
        {
            X = coordinates.Select(x => x.x1).Cast<object>().ToArray(),
            Y = coordinates.Select(x => x.x2).Cast<object>().ToArray(),
            Z = zColumn,
            Contours = new Contours()
            {
                Coloring = ColoringEnum.Lines
            },
            AutoContour = true,
            ZMin = (decimal)contourLines.First(),
            ZMax = (decimal)contourLines.Last(),
            ZMid = (decimal)contourLines[contourLines.Count / 2],
        };

        return contour;
    }

    private Histogram MakeFeatureHistogram(Vector<double> feature)
    {
        var column = feature.Cast<object>().ToList();
        return new Histogram
        {
            X = column,
            HoverInfo = Plotly.Blazor.Traces.HistogramLib.HoverInfoFlag.All
        };
    }

    private Scatter MakeTrainingScatter()
    {
        var columns = Detector.TrainingData.EnumerateColumns().ToImmutableArray();
        IList<object> xColumn = columns[0].Cast<object>().ToList();
        IList<object> yColumn = columns[1].Cast<object>().ToList();

        return
            new Scatter
            {
                Name = "Scatter",
                Mode = ModeFlag.Markers,
                Marker = new Marker()
                {
                    Symbol = SymbolEnum.Cross,
                    Color = Colors.Blue.Accent1,
                    Size = 12
                },
                X = xColumn,
                Y = yColumn,
                HoverInfo = HoverInfoFlag.X | HoverInfoFlag.Y,
                HoverOn = HoverOnFlag.Points
            };
    }

}