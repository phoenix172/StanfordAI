@page "/data"
@using AnomalyDetection.Client.ServiceContracts
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject IAnomalyDetector Detector
@using AnomalyDetection.Client.Components
@using Plotly.Blazor
@using Plotly.Blazor.Traces
@using Plotly.Blazor.Traces.ScatterLib
@using System.Reflection
@using System.Collections.Immutable
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib.MarkerLib


<script src="_content/Plotly.Blazor/plotly-latest.min.js" type="text/javascript"></script>
<script src="_content/Plotly.Blazor/plotly-interop.js" type="text/javascript"></script>

<MyMudProviders />

<PageTitle>Weather</PageTitle>



@if (_data != null)
{
    <PlotlyChart @bind-Config="_config" @bind-Layout="_layout" @bind-Data="_data" @ref="_chart"/>
}



@code {
    [CascadingParameter]
    public MudTheme Theme { get; set; }
    
    PlotlyChart _chart;
    Config _config;
    Layout _layout;
    
    // Using of the interface IList is important for the event callback!
    IList<ITrace>? _data;

    protected override async Task OnInitializedAsync()
    {
        _config = new ()
        {
            //FillFrame = true,
            Responsive = true,
            AutoSizable = true,
            
        };
        
        _layout = new Layout
        {
            Title = new Title
            {
                Text = GetType().Name
            },
            //PaperBgColor = "transparent",
            //PlotBgColor = "black",
            Font = new Font
            {
                // Color = Theme.PaletteDark.TextPrimary.ToString()
            },
            HoverMode = HoverModeEnum.XUnified
        };
        
        await Detector.LoadFrom("Data/Part1");
        var columns = Detector.TrainingData.EnumerateColumns().ToImmutableArray();
        IList<object> xColumn = columns[0].Cast<object>().ToList();
        IList<object> yColumn = columns[1].Cast<object>().ToList();

        _data = new List<ITrace>
        {
            new Scatter
            {
                Name = "Scatter",
                Mode = ModeFlag.Markers,
                Marker = new Marker()
                {
                    Symbol = SymbolEnum.Cross,
                    Color = Colors.Blue.Accent1,
                    Size = 12
                },
                X = xColumn,
                Y = yColumn,
                HoverInfo = HoverInfoFlag.X|HoverInfoFlag.Y,
                HoverOn = HoverOnFlag.Points
            }
        };

        await base.OnInitializedAsync();
    }

}
